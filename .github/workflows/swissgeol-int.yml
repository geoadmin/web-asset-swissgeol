name: Swissgeol Asset Int Deploy

on:
  # release:
  #  types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Container Tag"
env:
  APP_IMAGE: ghcr.io/geoadmin/swissgeol-asset-app:${{ github.event.inputs.tag || github.event.release.tag_name }}
  API_IMAGE: ghcr.io/geoadmin/swissgeol-asset-api:${{ github.event.inputs.tag || github.event.release.tag_name }}

jobs:
  # ------------------
  build-web-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: generate version.json
        id: generate-version
        uses: ./.github/actions/generate-version
        with:
          path: ./apps/client-asset-sg/src/assets

      - name: Build app Docker image
        run: docker build . -f ./apps/client-asset-sg/docker/Dockerfile -t ${{ env.APP_IMAGE }}

      - name: Push container image
        id: registry-push
        uses: ./.github/actions/registry-push
        with:
          image: ${{ env.APP_IMAGE }}
          username: ${{ vars.SWISSGEOL_BUILD_USERNAME }}
          password: ${{ secrets.SWISSGEOL_BUILD_PAT }}

  # ------------------
  build-web-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: generate version.json
        id: generate-version
        uses: ./.github/actions/generate-version
        with:
          path: ./apps/client-asset-sg/src/assets

      - name: Run NPM build
        run: |
          npm ci
          npm run build -- server-asset-sg
      - name: Retag Image
        working-directory: ./apps/server-asset-sg/docker
        run: docker tag registry.lambda-it.ch/asset-swissgeol/api:latest ${{ env.API_IMAGE }}

      - name: Push container image
        id: registry-push
        uses: ./.github/actions/registry-push
        with:
          image: ${{ env.API_IMAGE }}
          username: ${{ vars.SWISSGEOL_BUILD_USERNAME }}
          password: ${{ secrets.SWISSGEOL_BUILD_PAT }}

  # ------------------
  deployment:
    runs-on: ubuntu-latest
    needs: [build-web-app, build-web-api]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.release.tag_name }}
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Pulumi deployment to cluster
        uses: ./.github/actions/deploy
        with:
          pulumiConfigSecret: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          awsAccessKeyId: ${{ secrets.AWS_ACCESS_KEY_ID }}
          awsSecretAccessKey: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          eksClusterName: int
          eksRoleArn: arn:aws:iam::779726271945:role/kubernetes-admins-int
          pulumiConfigPassphrase: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
          stack: swissgeol-asset-int
          npmPkgToken: ${{ secrets.SWISSGEOL_BUILD_PAT }}
          command: up
          version: ${{ github.event.release.tag_name }}
